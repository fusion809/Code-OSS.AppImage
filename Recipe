#!/bin/bash

########################################################################
# Package the baries built on Travis-CI as an AppImage
# By Brenton Horne 2016
# For more information, see http://appimage.org/
########################################################################

APP=code-oss
LOWERAPP=${APP,,}

# Update APT cache
apt-get update

# Install base building packages
apt-get install -y wget curl build-essential libx11-dev git

# Get Node.js 7.x
curl -sL https://deb.nodesource.com/setup_7.x | bash -
apt-get install -y nodejs

# install gulp
npm install -g gulp

# VSCode version
CODE_VERSION=$(wget -cq https://github.com/Microsoft/vscode/releases -O - | grep ".tar.gz" | head -n 50 | cut -d '"' -f 2 | cut -d '/' -f 5 | sed 's|.tar.gz||g' | grep "[0-9]" | sort -u | tail -n 1)
printf "VERSION is $CODE_VERSION\n"

# Download source code tarball
wget -cqO- https://github.com/Microsoft/vscode/archive/${CODE_VERSION}.tar.gz | tar xz --transform="s/vscode-${CODE_VERSION}/vscode/"
if [[ -d /AppDir ]]; then
  rm -rf /AppDir
fi

# Make /AppDir/usr/bin dir
mkdir -p /AppDir/usr/bin

# cd into source directory
cd vscode
# add extension gallery
patch -Np1 -i <(wget -cqO- https://github.com/fusion809/code-oss/raw/master/product_json.patch)

# per Microsoft/vscode#13487; build
scripts/npm.sh install --unsafe-perm
node --max_old_space_size=2048 /usr/bin/gulp vscode-linux-x64

# cd out
cd ..
# copy files to /AppDir/usr/bin
cp -r VSCode-linux-x64/* /AppDir/usr/bin
# cd to /AppDir
cd /AppDir
mv usr/bin/resources/app/resources/linux/code.png code-oss.png
rm -rf ./usr/bin/resources/app/resources

# Create desktop config file
cat > code-oss.desktop <<EOF
[Desktop Entry]
Encoding=UTF-8
Name=Code (OSS)
Version=1.0
Exec=code-oss %F
Icon=code-oss
Type=Application
Categories=Development;TextEditor;
MimeType=application/javascript;application/json;application/postscript;application/x-desktop;application/x-httpd-eruby;application/x-httpd-php;application/x-httpd-php3;application/x-httpd-php4;application/x-httpd-php5;application/x-ruby;application/x-bash;application/x-csh;application/x-sh;application/x-zsh;application/x-shellscript;application/x-sql;application/x-tcl;application/xhtml+xml;application/xml;application/xml-dtd;application/xslt+xml;text/coffeescript;text/css;text/html;text/plain;text/xml;text/xml-dtd;text/x-bash;text/x-c++;text/x-c++hdr;text/x-c++src;text/x-c;text/x-chdr;text/x-csh;text/x-csrc;text/x-dsrc;text/x-diff;text/x-fortran;text/x-java;text/x-java-source;text/x-lua;text/x-makefile;text/x-markdown;text/x-objc;text/x-pascal;text/x-perl;text/x-php;text/x-ruby;text/x-sh;text/x-zsh;text/yaml;inode/directory;
EOF

# get functions.sh
wget -q https://github.com/fusion809/AppImages/raw/master/functions.sh -O ./functions.sh
chmod +x ./functions.sh
. ./functions.sh
rm functions.sh

########################################################################
# Copy desktop and icon file to AppDir for AppRun to pick them up
########################################################################

wget -c https://github.com/fusion809/Code-OSS.AppImage/raw/master/AppRun
chmod +x AppRun

mkdir -p ./usr/lib/x86_64-linux-gnu

# copy dependencies
copy_deps

# Move the libraries to usr/bin
move_lib

########################################################################
# Delete stuff that should not go into the AppImage
########################################################################

# if those libraries are present, there will be a pango problem
find . -name "libpango*" -delete
find . -name "libfreetype*" -delete
find . -name "libX*" -delete

# Delete dangerous libraries; see
# https://github.com/fusion809/AppImages/blob/master/excludelist
delete_blacklisted

########################################################################
# desktopintegration asks the user on first run to install a menu item
########################################################################

get_desktopintegration "$LOWERAPP"

rm -rf AppDir

# Package as AppImage
GLIBC_NEEDED=$(find . -type f -executable -exec strings {} \; | grep ^GLIBC_2 | sed s/GLIBC_//g | sort --version-sort | uniq | tail -n 1)
VERSION=${CODE_VERSION}.glibc$GLIBC_NEEDED
echo "VERSION is $VERSION"

cd ..

APPIMAGE=$APP"-"$VERSION"-x86_64.AppImage"

mkdir -p /out

rm -f /out/*.AppImage || true

curl -sL "https://github.com/probonopd/AppImageKit/releases/download/6/AppImageAssistant_6-x86_64.AppImage" > AppImageAssistant
chmod a+x AppImageAssistant
./AppImageAssistant ./AppDir/ /out/$APPIMAGE
